

free c: channel.
(* free SecureChannel: channel [private]. *)

type host.
type nonce.
type pkey.
type skey.
type spkey.
type sskey.
type key.



type G.
type exponent.
type symkey.
type CHskey.
type coins.



fun nonce_to_bitstring(nonce): bitstring [data,typeConverter].
fun G_to_nonce(G): nonce [data,typeConverter].
fun CHskey_to_exponent(CHskey): exponent [data,typeConverter].
fun coins_to_bitstring(coins): bitstring [data,typeConverter].
fun host_to_bitstring(host): bitstring [data,typeConverter].
fun symkey_to_bitstring(symkey): bitstring [data,typeConverter].
fun bitstring_to_symkey(bitstring): symkey [data,typeConverter].
fun bitstring_to_coins(bitstring): coins [data,typeConverter].
fun bitstring_to_nonce(bitstring): nonce [data,typeConverter].


(* Diffie-Hellman *)

const g: G [data].
fun exp(G, exponent): G.
fun A_VN(symkey, G, CHskey): G.
fun m_VN(G, CHskey, CHskey, bitstring, symkey, symkey, host, bitstring): G.
fun CH(G, G, symkey, host, bitstring): G.

equation 
	forall k: CHskey, x: CHskey, pID: bitstring, alpha: symkey, beta_VN: symkey, hostX: host, hostY: host, Timestamp:bitstring; CH(m_VN(g,k,x, pID, alpha, beta_VN, hostY, Timestamp), A_VN(alpha,g,x), beta_VN, hostY, Timestamp)=exp(g,CHskey_to_exponent(k)) [convergent].







(* Shared key encryption *)

fun sencrypt(bitstring,symkey): bitstring.
reduc forall x: bitstring, y: symkey; sdecrypt(sencrypt(x,y),y) = x.

(* Hash function *)

fun h0(nonce): symkey.
fun h1(nonce, nonce): symkey.
fun h2(G, symkey, symkey, bitstring): symkey.
fun h3(symkey, symkey, bitstring): symkey.
fun h4(bitstring, symkey, bitstring, symkey, symkey, symkey, bitstring): symkey.
fun h5(nonce, nonce, symkey, bitstring): symkey.
fun h6(symkey, symkey, bitstring, bitstring): bitstring.
fun h7(symkey): symkey.



(* Secrecy assumptions *)


not attacker(new k).
not attacker(new x).
not attacker(new GK).
not attacker(new b).
not attacker(new PD).

free VN: host.
free RSM, RSU: host.

(* the table host names/keys 
   The key table consists of chameleon hash(host, G) *)
table keys(host, G).


set ignoreTypes = false.


(* Role of the processInitiator_VN with identity xVN and secret CH key xk, xx *)
let processInitiator_VN(k: CHskey, x: CHskey, D: symkey, pID: bitstring) =
	(* new other: coins; *)
	new T1: bitstring;
	new alpha: symkey;
	new beta_VN: symkey;
    new random: symkey;
	(* The [host] can be understood as the [uid] sent by the base station actively. Generally, the base station will send it actively. *)
	(* xVN is equal to xpID, but it is split out here for convenience *)

	in(c, (xVN: host, hostX: host));
	if xVN = VN then
	let xk = k in 
	let xx = x in
	let xD = D in 
	let xpID = pID in
	let M = h2(exp(g, CHskey_to_exponent(xk)), xD, beta_VN, T1) in
	(*get keys(=hostX, pk_hostX) in*)

	(* Message 1 *)
	let message1 = (m_VN(g,xk,xx,xpID, alpha, beta_VN, hostX, T1), A_VN(alpha,g,xx), sencrypt(symkey_to_bitstring(beta_VN),xD), xpID, T1) in
	
	
	out(c, message1);

	
	
	(* Message 2 *)
	in(c, message2:bitstring)[precise];
	
	

	let(s2':bitstring, s3':bitstring, T2:bitstring) = message2 in
	let (beta_RSU': symkey, pID': bitstring, D': symkey) = sdecrypt(s2', M) in
	(* let D' = bitstring_to_symkey(string_D') in 
	let string_beta_RSU' = sdecrypt(s3, M) in
	let beta_RSU' = bitstring_to_symkey(string_beta_RSU') in*)
	let Ks = h3(beta_RSU', M, T2) in
	if s3' = symkey_to_bitstring(h4(s2', beta_RSU', pID', D', M, Ks, T2)) then

	

	let message3 = h6(M, Ks, message1, message2) in

	


	(* Message 3 *)
	out(c, message3);

	

	if xVN = VN then
	(
		out(c, (choice[h7(beta_VN), random], choice[h7(beta_RSU'), random], choice[h7(xD),random], choice[h7(M),random], choice[h7(Ks),random], choice[h7(bitstring_to_symkey(pID')),random], choice[h7(D'),random], choice[h7(bitstring_to_symkey(message1)),random], choice[h7(bitstring_to_symkey(message2)),random], choice[h7(bitstring_to_symkey(message3)),random]))
	)
	else 
	(
		out(c, (h7(beta_VN), h7(beta_RSU'), h7(xD), h7(M), h7(Ks), h7(bitstring_to_symkey(pID')), h7(D'), h7(bitstring_to_symkey(message1)), h7(bitstring_to_symkey(message2)), h7(bitstring_to_symkey(message3))))
	).







(* Role of the responder_RSU with identity xRSU *)
let processResponder_RSU(b: symkey, GK: nonce) = 
	in(c, xRSU: host);
	new beta_RSU: symkey;
	new T2: bitstring;
    new random: symkey;

	(* Message 1 *)
	in(c, message1: bitstring)[precise];
	let (m_VN_value:G , A_VN_value: G, senc_beta_VN: bitstring, xpID: bitstring, T1:bitstring) = message1 in

	(* get keys(=xRSU, pk_xRSU) in *)
	
	if xRSU = RSU then
	let xb = b in
	let xGK = GK in
	new PD': nonce;

	


	(* yuanlai RSM  *)
	(* let (m_VN_value:G , A_VN_value: G, senc_beta_VN: bitstring, xpID: bitstring) = m2 in *)
	let xD = h5(bitstring_to_nonce(sdecrypt(xpID, xb)), xGK, xb, xpID) in


	let (beta_VN':symkey) = bitstring_to_symkey(sdecrypt(senc_beta_VN, xD)) in
	let hostY = VN in 
	get keys(=hostY, CHvalue) in 
	if CHvalue = CH(m_VN_value, A_VN_value, beta_VN', RSU, T1) then

	
	let pID' = sencrypt(nonce_to_bitstring(PD'), xb) in
	let D' = h5(PD',xGK, xb, xpID) in
	let M = h2(CH(m_VN_value, A_VN_value, beta_VN', RSU, T1), xD, beta_VN', T1) in
	(* let m3 = (sencrypt(symkey_to_bitstring(D'), xD), M) in *)




	
	if xRSU = RSU then
	(* in(SecureChannel, m3: bitstring);
	let (s2:bitstring, M:symkey) = m3 in*)

	

	let Ks = h3(beta_RSU, M, T2) in 
	let s2 = sencrypt((beta_RSU, pID', D'), M) in
	let s3 = symkey_to_bitstring(h4(s2, beta_RSU, pID', D', M, Ks, T2)) in

	
	let message2 = (s2, s3, T2) in



	(* Message 2 *)
	out(c, message2);


	(* Message 3 *)
	in(c, message3:bitstring);
	if message3 = h6(M, Ks, message1, message2) then

    if xRSU = RSU then
	(
		out(c, (choice[h7(beta_VN'), random], choice[h7(beta_RSU), random], choice[h7(xD),random], choice[h7(M),random], choice[h7(Ks),random], choice[h7(bitstring_to_symkey(pID')),random], choice[h7(D'),random]))
	)
	else 
	(
		out(c, (h7(beta_VN'), h7(beta_RSU), h7(xD), h7(M), h7(Ks), h7(bitstring_to_symkey(pID')), h7(D')))
	).
	






(* Key registration *)
let processK =
	in(c, (h: host, k: G));
	if h <> VN then insert keys(h,k).




(* Start process *)
process 
	new k: CHskey; insert keys(VN, exp(g, CHskey_to_exponent(k)));
	new x: CHskey;
	new GK: nonce;
	new b: symkey;
	new PD: nonce;
	let pID = sencrypt(nonce_to_bitstring(PD), b) in
	let D = h5(PD, GK, b, pID) in
	(* new pk_RSU: G; insert keys(RSU, pk_RSU);*)
	(
	  (* Launch an unbounded number of sessions of the initiator *)
	  (!processInitiator_VN(k, x, D, pID)) | 
	  (* Launch an unbounded number of sessions of the responder *)
	  (!processResponder_RSU(b, GK)) |
	  (* Key registration process *)
	  ((!processK))
	)